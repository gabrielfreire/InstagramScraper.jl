function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(JSON.Parser.read_four_hex_digits!), JSON.Parser.MemoryParserState})
    precompile(Tuple{typeof(JSON.Parser.parse_array), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64}, JSON.Parser.MemoryParserState})
    precompile(Tuple{typeof(JSON.Parser.hasleadingzero), JSON.Parser.MemoryParserState, Int64, Int64})
    precompile(Tuple{typeof(JSON.Parser._count_before), String, Char, Int64})
    precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64}, JSON.Parser.MemoryParserState})
    precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.MemoryParserState})
    precompile(Tuple{typeof(JSON.Parser._error_expected_char), UInt8, JSON.Parser.MemoryParserState})
    precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState, Base.GenericIOBuffer{Array{UInt8, 1}}})
    precompile(Tuple{typeof(JSON.Parser.int_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64}, JSON.Parser.MemoryParserState, JSON.Parser.MemoryParserState, Int64, Int64})
    precompile(Tuple{typeof(JSON.Parser._error), String, JSON.Parser.MemoryParserState})
    precompile(Tuple{typeof(JSON.Parser.read_unicode_escape!), JSON.Parser.MemoryParserState})
    precompile(Tuple{typeof(JSON.Parser.predict_string), JSON.Parser.MemoryParserState})
    precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64}, JSON.Parser.MemoryParserState, Bool, JSON.Parser.MemoryParserState, Int64, Int64})
    precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState})
    precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64}, JSON.Parser.MemoryParserState})
    precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64}, JSON.Parser.MemoryParserState})
    precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#1")), Type{Int}, Type{Int64}, typeof(identity), Base.SubString{String}})
    precompile(Tuple{typeof(JSON.Parser.parse), Base.SubString{String}})
end
