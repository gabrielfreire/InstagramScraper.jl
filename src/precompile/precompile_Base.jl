function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
    precompile(Tuple{typeof(Base.collect_to!), Array{Char, 1}, Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, Int64, Int64})
    precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Function}, Symbol})
    precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String})
    precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
    precompile(Tuple{typeof(Base.string), Char, String, Char})
    precompile(Tuple{typeof(Base.tryparse_internal), Type{UInt64}, String, Int64, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.string), String, Char, String})
    precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Base.SubString{String}, String})
    precompile(Tuple{typeof(Base.endswith), String, String})
    precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
    precompile(Tuple{typeof(Base.string), String, Base.SubString{String}, String})
    precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Base.SubString{String}})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Base.SubString{String}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}, getfield(HTTP.ConnectionPool, Symbol("#isdeletable#10"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.string), String, String, String})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Base.SubString{String}})
    precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr})
    precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Any}, Int64})
    precompile(Tuple{typeof(Base.notify), Base.Condition, Array{InstagramScraper.InstagramProfile, 1}, Bool, Bool})
    precompile(Tuple{typeof(Base.time_print), UInt64, Int64, Int64, Int64})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, AbstractString}, Int64})
    precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Char, String})
    precompile(Tuple{typeof(Base.StackTraces.lookup), Base.InterpreterIP})
    precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, String})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt8, UInt8}, UInt8})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Error, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}, String})
    precompile(Tuple{typeof(Base.unsafe_read), MbedTLS.SSLContext, Ptr{UInt8}, UInt64})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}})
    precompile(Tuple{typeof(Base.lpad), String, Int64, String})
    precompile(Tuple{typeof(Base.Printf.print_fixed), Base.TTY, Int64, Int32, Int32, Bool, Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Nothing}, Base.SubString{String}})
    precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Base.SubString{String}, String, Union{Char, Base.SubString{String}, String}})
    precompile(Tuple{typeof(Base._split), Base.SubString{String}, typeof(identity), Int64, Bool, Array{Base.SubString{String}, 1}})
    precompile(Tuple{typeof(Base.readavailable), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#671")), Bool, typeof(identity), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
    precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, Ptr{UInt8}, UInt64})
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#671")), Bool, typeof(identity), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
    precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
    precompile(Tuple{typeof(Base.unalias), Array{UInt8, 1}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
    precompile(Tuple{typeof(Base.mapfilter), getfield(HTTP.ConnectionPool, Symbol("##6#7")){DataType, Base.SubString{String}, Base.SubString{String}, Int64}, typeof(Base.push!), Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}, Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Fail, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{InstagramScraper.InstagramProfile, 1}, Base.IndexLinear, Array{Any, 1}})
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#671")), Bool, typeof(identity), typeof(identity), Symbol, Base.TTY, String, String})
    precompile(Tuple{getfield(Base, Symbol("##Timer#448#449")), Float64, Type{Int}, Int64})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Any}, String})
    precompile(Tuple{typeof(Base.write), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, String, String})
    precompile(Tuple{typeof(Base.uv_write_async), Base.TTY, Ptr{UInt8}, UInt64})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{String, Any}, String})
    precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.CoreLogging.LogLevel})
    precompile(Tuple{typeof(Base.warn_color)})
    precompile(Tuple{typeof(Base.print), String, String})
    precompile(Tuple{typeof(Base.iswritable), MbedTLS.SSLContext})
    precompile(Tuple{typeof(Base.copyto!), Array{Int32, 1}, Int64, Array{Int32, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.ccallable), typeof(identity), Type{Int}, Type{Int}, String})
    precompile(Tuple{typeof(Base.task_done_hook), Task})
    precompile(Tuple{typeof(Base.unsafe_write), Base.TTY, Base.RefValue{UInt8}, Int64})
    precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_header)})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Tuple{Base.UnitRange{Int64}}})
    precompile(Tuple{typeof(Base.deleteat!), Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}, Array{Bool, 1}})
    precompile(Tuple{getfield(Base, Symbol("##read#314")), Bool, typeof(identity), Base.IOStream, Int32})
    precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Base.KeySet{String, Base.Dict{String, Any}}})
    precompile(Tuple{typeof(Base.println), HTTP.Messages.Request})
    precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Expr, 1}, typeof(Base.esc)}, Int64, Int64})
    precompile(Tuple{typeof(Base.findfirst), typeof(identity), Base.SubString{String}})
    precompile(Tuple{getfield(Base, Symbol("##open#309")), Bool, Nothing, Nothing, Nothing, Nothing, typeof(identity), String})
    precompile(Tuple{typeof(Base.mapfilter), getfield(HTTP.ConnectionPool, Symbol("##8#9")){DataType, Base.SubString{String}, Base.SubString{String}, Int64, Bool}, typeof(Base.push!), Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}, Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}})
    precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
    precompile(Tuple{getfield(Base, Symbol("#readcb_specialized#489")), Sockets.TCPSocket, Int64, UInt64})
    precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, UInt8})
    precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Test.Error, Test.Fail}, 1}, Base.IndexLinear, Array{Any, 1}})
    precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
    precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
    precompile(Tuple{typeof(Base.eof), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
    precompile(Tuple{typeof(Base.mapfilter), getfield(HTTP.ConnectionPool, Symbol("##4#5")){DataType, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64}, typeof(Base.push!), Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}, Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}})
    precompile(Tuple{getfield(Base, Symbol("##s72#143")), Int, Int, Int, Int, Int})
    precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(Base, Symbol("##264#265"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
    precompile(Tuple{typeof(Base.println), Test.Fail})
    precompile(Tuple{typeof(Base.copyto!), Array{UInt128, 1}, Int64, Array{UInt128, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.mapfilter), getfield(HTTP.ConnectionPool, Symbol("##12#13")), typeof(Base.push!), Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}, Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}})
    precompile(Tuple{typeof(Base.string), String, Array{HTTP.Cookies.Cookie, 1}, Bool})
    precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
    precompile(Tuple{typeof(Base.print), Base.TTY, String, String})
    precompile(Tuple{typeof(Base.mapfilter), typeof(HTTP.Cookies.validcookievaluebyte), typeof(Base.push!), Array{Char, 1}, Array{Char, 1}})
    precompile(Tuple{getfield(Base, Symbol("##open#310")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), (getfield(Base, Symbol("##655#656"))){String, Base.UUID, String}, String})
    precompile(Tuple{typeof(Base.first), String})
    precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}})
    precompile(Tuple{typeof(Base.alloc_buf_hook), Sockets.TCPSocket, UInt64})
    precompile(Tuple{typeof(Base.expand_ccallable), Nothing, Expr})
    precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(Base, Symbol("##264#265"))}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:path}})
    precompile(Tuple{typeof(Base.eof), Sockets.TCPSocket})
    precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}})
    precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing}}})
    precompile(Tuple{typeof(Base.show), Base.TTY, InstagramScraper.InstagramProfile})
    precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
    precompile(Tuple{typeof(Base.isempty), String})
    precompile(Tuple{getfield(Base, Symbol("##open#310")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), (getfield(Base, Symbol("##272#273"))){Tuple{}}, String})
    precompile(Tuple{typeof(Base.Printf.fix_dec), Base.TTY, Float64, String, Int64, Int64, Char, Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.debug_color)})
    precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:body}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, AbstractString}, String, String})
    precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(), Tuple{}}}})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, String})
    precompile(Tuple{typeof(Base.print), Base.TTY, Char})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:head}, Int64}, Int64, Int64})
    precompile(Tuple{getfield(Base, Symbol("##open#310")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), (getfield(Base, Symbol("##651#652"))){String}, String})
    precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:link}})
    precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:span}})
    precompile(Tuple{typeof(Base.unsafe_write), Base.TTY, Ptr{UInt8}, UInt64})
    precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
    precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
    precompile(Tuple{typeof(Base.close), MbedTLS.SSLContext})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}})
    precompile(Tuple{typeof(Base.copy), Random.MersenneTwister})
    precompile(Tuple{typeof(Base.in), Type{Int}, Array{DataType, 1}})
    precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:svg}})
    precompile(Tuple{getfield(Base, Symbol("##open#310")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), (getfield(Base, Symbol("##657#658"))){String, Base.PkgId}, String})
    precompile(Tuple{typeof(Base.print), Test.Fail})
    precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
    precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
    precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:title}})
    precompile(Tuple{typeof(Base.show), InstagramScraper.InstagramProfile})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:script}, Int64}, Int64})
    precompile(Tuple{typeof(Base.info_color)})
    precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:script}})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:head}})
    precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(identity), Symbol, Base.TTY, String, String})
    precompile(Tuple{typeof(Base.push!), Array{Gumbo.HTMLNode, 1}, Gumbo.HTMLElement{:meta}})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:span}, Int64}, Int64})
    precompile(Tuple{typeof(Base.check_open), Sockets.TCPSocket})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:svg}, Int64}, Int64})
    precompile(Tuple{typeof(Base.diff_names), Tuple{}, Tuple{Symbol, Symbol, Symbol, Symbol}})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String, String})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:body}, Int64}, Int64})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Any}, String})
    precompile(Tuple{typeof(Base.isopen), Sockets.TCPSocket})
    precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Expr}, Base.Generator{Array{Any, 1}, getfield(Base, Symbol("##264#265"))}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.iterate), Array{Gumbo.HTMLNode, 1}, Int64})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, String})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
    precompile(Tuple{typeof(Base.nextind), Array{Gumbo.HTMLNode, 1}, Int64})
    precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
    precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{}})
    precompile(Tuple{typeof(Base.println), HTTP.Messages.Response})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:path}, Int64}, Int64, Int64})
    precompile(Tuple{getfield(Base, Symbol("##printstyled#672")), Bool, Symbol, typeof(identity), Base.TTY, String, String})
    precompile(Tuple{typeof(Base.uv_write), Base.TTY, Ptr{UInt8}, UInt64})
    precompile(Tuple{getfield(Base, Symbol("##parse#348")), Nothing, typeof(identity), Type{Int64}, Base.SubString{String}})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
    precompile(Tuple{typeof(Base.mapfilter), getfield(HTTP.RedirectRequest, Symbol("##2#3")), typeof(Base.push!), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}})
    precompile(Tuple{typeof(Base.min), UInt64, Int64})
    precompile(Tuple{typeof(Base.getindex), Type{String}, String})
    precompile(Tuple{typeof(Base.keys), Base.Dict{String, Any}})
    precompile(Tuple{typeof(Base.bytesavailable), Sockets.TCPSocket})
    precompile(Tuple{typeof(Base.read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
    precompile(Tuple{typeof(Base.getindex), Type{String}, String, String})
    precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol}})
    precompile(Tuple{typeof(Base.iterate), AbstractTrees.ImplicitChildStates{Gumbo.HTMLElement{:HTML}, AbstractTrees.ImplicitNodeStack{Any, Int64}}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##printstyled#672")), Bool, Symbol, typeof(identity), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:script}, Int64}, Int64, Int64})
    precompile(Tuple{typeof(Base.readbytes!), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
    precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
    precompile(Tuple{typeof(Base.getindex), Gumbo.HTMLElement{:script}, Int64})
    precompile(Tuple{typeof(Base.include), Module, String})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:svg}, Int64}, Int64, Int64})
    precompile(Tuple{typeof(Base._any), getfield(HTTP.Messages, Symbol("##4#5")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Colon})
    precompile(Tuple{typeof(Base.nextind), AbstractTrees.ImplicitChildStates{Gumbo.HTMLElement{:HTML}, AbstractTrees.ImplicitNodeStack{Any, Int64}}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##printstyled#673")), Bool, Symbol, typeof(identity), String, String})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:title}, Int64}, Int64})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:head}, Int64}, Int64})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:span}, Int64}, Int64, Int64})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:path}, Int64}, Int64})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLText, Int64}, Int64})
    precompile(Tuple{typeof(Base.getindex), Array{InstagramScraper.InstagramProfile, 1}, Int64})
    precompile(Tuple{getfield(Base, Symbol("#@time")), LineNumberNode, Module, Int})
    precompile(Tuple{typeof(Base.readavailable), MbedTLS.SSLContext})
    precompile(Tuple{typeof(Base.:(==)), Int32, Int64})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:body}, Int64}, Int64, Int64})
    precompile(Tuple{typeof(Base.getindex), Array{Gumbo.HTMLNode, 1}, Int64})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:link}, Int64}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##264#265")), Expr})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, AbstractString}, String})
    precompile(Tuple{typeof(Base.length), Array{InstagramScraper.InstagramProfile, 1}})
    precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{}})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLText, Int64}, Int64, Int64})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:meta}, Int64}, Int64, Int64})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:link}, Int64}, Int64, Int64})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:title}, Int64}, Int64, Int64})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Gumbo.HTMLElement{:meta}, Int64}, Int64})
    precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
    precompile(Tuple{typeof(Base.copy!), Random.MersenneTwister, Random.MersenneTwister})
    precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("##4#6")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
    precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
    precompile(Tuple{typeof(Base.map), typeof(identity), Array{Expr, 1}})
    precompile(Tuple{getfield(Base, Symbol("#@ccallable")), LineNumberNode, Module, Int})
    precompile(Tuple{typeof(Base.MainInclude.include), String})
    precompile(Tuple{typeof(Base.strip), String})
    precompile(Tuple{typeof(Base.unsafe_write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Ptr{UInt8}, UInt64})
    precompile(Tuple{typeof(Base._collect), Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}, Base.Generator{Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}, getfield(HTTP.ConnectionPool, Symbol("#isdeletable#10"))}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Any}, String})
    precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
    precompile(Tuple{typeof(Base.collect), Base.KeySet{String, Base.Dict{String, Any}}})
    precompile(Tuple{getfield(Base, Symbol("##parse#348")), Nothing, typeof(identity), Type{UInt64}, String})
    precompile(Tuple{typeof(Base.readuntil), (HTTP.ConnectionPool).Transaction{MbedTLS.SSLContext}, typeof(identity), Int64})
    precompile(Tuple{typeof(Base._collect), Array{Expr, 1}, Base.Generator{Array{Expr, 1}, typeof(Base.esc)}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(Base, Symbol("##264#265"))}})
    precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
    precompile(Tuple{typeof(Base.close), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}})
    precompile(Tuple{typeof(Base.println), Base.TTY})
    precompile(Tuple{typeof(Base.print), Base.TTY, String})
    precompile(Tuple{typeof(Base.write), Base.TTY, UInt8})
    precompile(Tuple{typeof(Base.eachmatch), Cascadia.Selector, Gumbo.HTMLElement{:HTML}})
    precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Function}, Symbol})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, getfield(Base, Symbol("##264#265"))}, Int64})
    precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
    precompile(Tuple{typeof(Base.collect_similar), Array{Expr, 1}, Base.Generator{Array{Expr, 1}, typeof(Base.esc)}})
end
