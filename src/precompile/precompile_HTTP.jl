function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(HTTP.Cookies.isCookieDomainName), String})
    precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), Base.SubString{String}, Base.SubString{String}})
    precompile(Tuple{typeof(HTTP.URIs.group), Int64, Base.Regex, Base.SubString{String}, Base.SubString{String}})
    precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), String, String})
    precompile(Tuple{typeof(HTTP.Messages.defaultheader), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, String}})
    precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), Base.SubString{String}, String})
    precompile(Tuple{typeof(HTTP.Messages.bodylength), HTTP.Messages.Response})
    precompile(Tuple{typeof(HTTP.URIs.group), Int64, Base.Regex, String, Base.SubString{String}})
    precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, (HTTP.Messages).Response, Nothing, (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), Type{(HTTP.MessageRequest).MessageLayer{(HTTP.RetryRequest).RetryLayer{(HTTP.ExceptionRequest).ExceptionLayer{(HTTP.ConnectionRequest).ConnectionPoolLayer{(HTTP.StreamRequest).StreamLayer}}}}}, String, (HTTP.URIs).URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
    precompile(Tuple{typeof(HTTP.IOExtras.localport), MbedTLS.SSLContext})
    precompile(Tuple{typeof(HTTP.Parsers.parse_chunk_size), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
    precompile(Tuple{typeof(HTTP.URIs.resource), HTTP.URIs.URI})
    precompile(Tuple{typeof(HTTP.Messages.defaultheader), HTTP.Messages.Request, Base.Pair{String, String}})
    precompile(Tuple{typeof(HTTP.Cookies.isIP), String})
    precompile(Tuple{typeof(HTTP.Parsers.group), Int64, Base.Regex, Base.SubString{String}})
    precompile(Tuple{getfield(HTTP, Symbol("##stack#19")), Bool, Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.stack)})
    precompile(Tuple{typeof(HTTP.URIs.ensurevalid), HTTP.URIs.URI})
    precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, String, String, String, Base.SubString{String}})
    precompile(Tuple{typeof(HTTP.Parsers.group), Int64, Base.Regex, String})
    precompile(Tuple{typeof(HTTP.IOExtras.tcpsocket), MbedTLS.SSLContext})
    precompile(Tuple{typeof(HTTP.Messages.mkheaders), Array{Any, 1}})
    precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#14")), Bool, Int64, (Base.Iterators).Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction), Tuple{Bool, Nothing}}}, typeof(identity), Type{Sockets.TCPSocket}, Base.SubString{String}, String})
    precompile(Tuple{typeof(HTTP.IOExtras.peerport), MbedTLS.SSLContext})
    precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Request, String})
    precompile(Tuple{typeof(HTTP.Messages.hasheader), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
    precompile(Tuple{typeof(HTTP.Parsers.nextbytes), Base.Regex, Base.SubString{String}})
    precompile(Tuple{typeof(HTTP.URIs.absuri), HTTP.URIs.URI, HTTP.URIs.URI})
    precompile(Tuple{getfield(HTTP.Messages, Symbol("##Request#3")), Base.VersionNumber, (HTTP.Messages).Response, Type{Int}, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
    precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}})
    precompile(Tuple{typeof(HTTP.Messages.issafe), String})
    precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{Int}, Int64, (Base.Iterators).Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(identity), Type{(HTTP.ConnectionRequest).ConnectionPoolLayer{(HTTP.StreamRequest).StreamLayer}}, (HTTP.URIs).URI, (HTTP.Messages).Request, Array{UInt8, 1}})
    precompile(Tuple{typeof(HTTP.Pairs.setbyfirst), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{Base.SubString{String}, Base.SubString{String}}, typeof(HTTP.Messages.field_name_isequal)})
    precompile(Tuple{typeof(HTTP.Messages.parse_header_fields!), Base.SubString{String}, HTTP.Messages.Response})
    precompile(Tuple{typeof(HTTP.method_name), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
    precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), Type{(HTTP.MessageRequest).MessageLayer{(HTTP.RetryRequest).RetryLayer{(HTTP.ExceptionRequest).ExceptionLayer{(HTTP.ConnectionRequest).ConnectionPoolLayer{(HTTP.StreamRequest).StreamLayer}}}}}, String, (HTTP.URIs).URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
    precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer}}}, HTTP.URIs.URI, HTTP.Messages.Request, Array{UInt8, 1}})
    precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, String, Int64, String, Int64})
    precompile(Tuple{typeof(HTTP.Messages.bodylength), HTTP.Messages.Request})
    precompile(Tuple{typeof(HTTP.ConnectionPool.global_sslconfig), Bool})
    precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), Type{(HTTP.RedirectRequest).RedirectLayer{(HTTP.MessageRequest).MessageLayer{(HTTP.RetryRequest).RetryLayer{(HTTP.ExceptionRequest).ExceptionLayer{(HTTP.ConnectionRequest).ConnectionPoolLayer{(HTTP.StreamRequest).StreamLayer}}}}}}, String, (HTTP.URIs).URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
    precompile(Tuple{typeof(HTTP.Parsers.nextbytes), Base.Regex, String})
    precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer}, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request, Array{UInt8, 1}})
    precompile(Tuple{typeof(HTTP.Messages.writeheaders), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Request})
    precompile(Tuple{typeof(HTTP.Cookies.sanitizeCookieValue), String})
    precompile(Tuple{typeof(HTTP.precondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
    precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}})
    precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#11")), Int64, Int64, Int64, Int64, Bool, (Base.Iterators).Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(identity), Type{(HTTP.ConnectionPool).Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
    precompile(Tuple{typeof(HTTP.IOExtras.closewrite), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}})
    precompile(Tuple{typeof(HTTP.Messages.defaultheader), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, Base.SubString{String}}})
    precompile(Tuple{typeof(HTTP.IOExtras.closewrite), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
    precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, String, String, String, String})
    precompile(Tuple{getfield(HTTP, Symbol("##request#5")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), String, (HTTP.URIs).URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
    precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#isdeletable#10")), HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}})
    precompile(Tuple{typeof(HTTP.Messages.readchunksize), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Response})
    precompile(Tuple{typeof(HTTP.Messages.appendheader), HTTP.Messages.Response, Base.Pair{Base.SubString{String}, Base.SubString{String}}})
    precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), Type{(HTTP.StreamRequest).StreamLayer}, (HTTP.ConnectionPool).Transaction{MbedTLS.SSLContext}, (HTTP.Messages).Request, Array{UInt8, 1}})
    precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##2#3")), Base.Pair{Base.SubString{String}, Base.SubString{String}}})
    precompile(Tuple{getfield(HTTP.Parsers, Symbol("##find_end_of_header#1")), Bool, typeof(identity), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
    precompile(Tuple{typeof(HTTP.Streams.http_unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Ptr{UInt8}, UInt64})
    precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction), Tuple{Int64, Nothing}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, Base.SubString{String}, Base.SubString{String}})
    precompile(Tuple{typeof(HTTP.ConnectionPool.client_transaction), HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}})
    precompile(Tuple{typeof(HTTP.ConnectionPool.read_to_buffer), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, Int64})
    precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
    precompile(Tuple{getfield(HTTP.URIs, Symbol("##parse_uri_reference#6")), Bool, typeof(identity), Base.SubString{String}})
    precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
    precompile(Tuple{typeof(HTTP.ConnectionPool.purge), HTTP.ConnectionPool.Connection{MbedTLS.SSLContext}})
    precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
    precompile(Tuple{typeof(HTTP.URIs.formaturi), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}})
    precompile(Tuple{typeof(HTTP.Messages.ischunked), HTTP.Messages.Request})
    precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
    precompile(Tuple{typeof(HTTP.Messages.isidempotent), String})
    precompile(Tuple{getfield(HTTP.URIs, Symbol("##parse_uri_reference#6")), Bool, typeof(identity), String})
    precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Response, String, String})
    precompile(Tuple{typeof(HTTP.ConnectionPool.purge)})
    precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
    precompile(Tuple{typeof(HTTP.Parsers.__init__)})
    precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
    precompile(Tuple{typeof(HTTP.Streams.isaborted), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}})
    precompile(Tuple{typeof(HTTP.URIs.__init__)})
    precompile(Tuple{getfield(HTTP.Messages, Symbol("##Request#3")), Base.VersionNumber, Nothing, Type{Int}, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Array{UInt8, 1}})
    precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##sslconnection#18")), Bool, MbedTLS.SSLConfig, (Base.Iterators).Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(identity), Sockets.TCPSocket, Base.SubString{String}})
    precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, HTTP.Messages.Request, Array{UInt8, 1}})
    precompile(Tuple{typeof(HTTP.URIs.absuri), Base.SubString{String}, HTTP.URIs.URI})
    precompile(Tuple{typeof(HTTP.Parsers.parse_status_line!), String, HTTP.Messages.Response})
    precompile(Tuple{typeof(HTTP.Messages.readheaders), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}, HTTP.Messages.Response})
    precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}})
    precompile(Tuple{typeof(HTTP.StreamRequest.writechunk), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, HTTP.Messages.Request, UInt8})
    precompile(Tuple{typeof(HTTP.StreamRequest.readbody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{MbedTLS.SSLContext}}, HTTP.Messages.Response, Nothing})
end
